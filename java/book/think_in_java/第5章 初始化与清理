第5章 初始化与清理

4、this关键字
 内部类获取当前对象的引用。
 Leaf increment() {
    i++;
    return this;
  }


 4.2 static的含义
 static的方法就是没有this的方法。
 内部不能调用非静态方法。
 仅通过类本类来调用static方法。

 5 清理： 终结处理和垃圾回收。
 finalize():一旦垃圾回收器准备好释放对象占用的存储空间，将调用finalize()方法。并且在下一次垃圾回收动作发生对象占用的空间。

 1、对象可能不被垃圾回收
 2、垃圾回收并不等于“析构”

递增不是原子操作。

当资源被被另一个任务使用时，加上锁。
第一个使用某个资源的加上锁。
互斥量mutex

1、synchronized防止资源冲突。

synchronized void f(){};
如果你正在写一个变量，它可能接下来被另一个线程读取，或者读取上一个已经被另一个线程写过的变量，那么你必须使用同步，并且被写线程都必须用相同的监视器锁同步。

 2、private Lock lock = new ReentrantLock();加锁
可以在finaly进行维护系统，而synchronized不能维护。

原子性与易变性。
使用volatile可以获得原子性。原子操作可由线程机制保证其不被中断。
volatile关键字还确保了应用中的可见性。
volatile产生写操作，所有的读操作都可以看到这个修改，volatile会立即被写入主存中。而读取操作就发生在主存中。
非volatile操作不必写入主存中。
当一个域的值依赖与它之前的值volatile将无法工作了。

java每条指令都会产生一些其他命令，因此获取和放置之间，另一个任务可能会修改这个区域。所以这些操作都不是原子性的。

如果一个域可能多个任务同时访问，或者这些任务中至少有一个是写入任务，那么你就应该将这个域设置成volatile。

Brian同步原则。

临界区：
多个线程同时访问方法的内部部分代码而不是防止访问整个方法。通过这个方法分离出来的代码称为临界区。它也使用了synchronized关键字建立。













